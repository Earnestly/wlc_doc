WLC_INTERFACE.KEYBOARD(3)                                WLC CORE API FUNCTIONS

NAME

    wlc_interface.keyboard - keyboard events

SYNOPSIS

    #include <wlc/wlc.h>

    bool (*key)(wlc_handle view, uint32_t time, const struct wlc_modifiers*, uint32_t key, enum wlc_key_state);

DESCRIPTION

    The key callback provides key events to the given view.  If the view is not
    focused then it shall be set to 0.  This is useful to handle key events in
    situations where focus is or is not required.  For example global key
    bindings or view specific keybindings.

    The time represents a timestamp of when the key event occured.  It is a
    magical number and cannot be relied on.

    The modifiers provided are WLC_BIT_MOD_CAPS, WLC_BIT_MOD_CTRL,
    WLC_BIT_MOD_ALT, WLC_BIT_MOD_MOD2, WLC_BIT_MOD_MOD3, WLC_BIT_MOD_LOGO and
    WLC_BIT_MOD_MOD5.

    The WLC_BIT_MOD_LOGO modifier corresponds to the key which has a system
    logo drawn onto it such as Windows or the Linux penguin.  This is also
    known as the "super" key or "mod4".

    The key returns the raw keycode which depends on the operating system and
    hardware.  This value should be processed via a function such as
    wlc_keyboard_get_keysym_for_key().

    The key state provides distinction between pressed and released positions
    with WLC_KEY_STATE_PRESSED and WLC_KEY_STATE_RELEASED respectively.
};

RETURN VALUE

    The return value of all functions dictate what is sent to the client.  If
    the function returns true then the client doesn't see the event, if false
    the events fall through to the client.

EXAMPLE

    #include <wlc/wlc.h>

    static bool handle_key(wlc_handle view, uint32_t time,
                           const struct wlc_modifiers *modifiers, uint32_t key,
                           enum wlc_key_state state) {
        if (state == WLC_KEY_STATE_PRESSED) {
            uint32_t sym = wlc_keyboard_get_keysym_for_key(key, 0);

            if (bind = match_bind(sym, modifiers->mods, bindings))
                process(bind);
        }
    }

    struct wlc_interface interface = {
        .keyboard = {
            .key = handle_key,
        },
    };

    wlc_init(&interface, argc, argv);

ALSO SEE

    wlc_interface.view(3), wlc_init(3), wlc_keyboard_get_keysym_for_key(3)
